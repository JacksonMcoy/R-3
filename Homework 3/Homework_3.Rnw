\documentclass [a4paper]{article}

\usepackage{graphics,latexsym,geometry,amsmath,bibunits,makeidx,fancyhdr}
\usepackage[authoryear,round]{natbib}
\usepackage{graphicx}
\usepackage{enumerate}
\usepackage{hyperref}
\usepackage{color}
\usepackage{fullpage}

\pagestyle{fancy}

\title{Homework Assignment \#2} 
\date{February 9, 2017}
\author{Matt Kline}

\begin{document}
\maketitle
\begin{enumerate}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[Part 1] Vectors:
\item[1.)] Consider again the data on populations, illiteracy rates, and murder rates for 10 states of the United States: population in thousands, percent illiteracy, and murders per 100,000 population. First create the following vectors:

<<>>=
illit <- c(2.1, 1.5, 1.8, 1.9, 1.1, 0.7, 1.1, 0.9, 1.3, 2.0)
murder <- c(15.1, 11.3, 7.8, 10.1, 10.3, 6.8, 3.1, 6.2, 10.7, 13.9)
pop <- c(3615, 365, 2212, 2110, 21198, 2541, 3100, 579, 8277, 4931)
@

\item[a.] Use rev() to print the elements of illit in reverse order.

<<>>=
rev(illit)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[b.] Print the elements of illit that are greater than the median illiteracy rate. Use median() to get the median illiteracy rate.

<<>>=
median(illit)
illit[illit[] > median(illit)]
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[c.] Print the elements of murder for which the illiteracy rate is greater than its median.

 <<>>=
murder[illit[] > median(illit)]
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[2.)] Consider again the data on murder rates from the previous exercise.\\
\item[a.] Write a command involving which() that determines the indices of the murder rates that are greater than 12.

<<>>=
which(murder[] > 12, TRUE)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[b.] The following command does the same thing as which(murder $>$ 12):

<<>>= 
(1:10)[murder >12]
@

Why do you think the parentheses are included in the expression? Experiment a little.\\

I think that the parentheses are included to show that [murder $>$ 12] needs to be applied to all 10 values.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[3.)] Consider the data vector:\\

<<>>=
x <- c(-3, -2, 0, 0, 4, 5, 9, 0, -6, 7, -2, 8)
@

Write a command involving sum() and == that counts the number of elements of x that are equal to 0.

<<>>=
sum(x == 0)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[Part 2] Matrices and Arrays:
\item[4.)] Create the following matrix in three different ways:\\
\item[a.] Using matrix()

<<>>=
X <- matrix(c(1:5), nrow = 5, ncol = 8)
print(X)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[b.] Using rbind()

<<>>=
rbind(rep(1, times = 8), 
      rep(2, times = 8), 
      rep(3, times = 8), 
      rep(4, times = 8), 
      rep(5, times = 8))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[c.] Using cbind()

<<>>=
cbind(1:5, 1:5, 1:5, 1:5, 1:5, 1:5, 1:5, 1:5)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[5.)] 
\item[a.] Write a command that uses apply() to find the minimum value in each row of a matrix X.

<<>>=
apply(X, MARGIN = 1, min)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[b.] Write a command that uses apply() to sort each column of a matrix X.

<<>>=
apply(X, MARGIN = 2, sort)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[6.)] state.x77 is a dataset that is supplied with R and stored in the form of a matrix. It contains information about the population, income, and other factors for each US state. You can see its values by typing its name, just as you would with datasets that you create yourself:

<<>>=
#state.x77
@

\item[a.] Write a command involving square brackets [ ] that prints the first 5 rows of state.x77.

<<>>=
state.x77[1:5,]
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[b.] Write a command that determines how many rows state.x77 has.

<<>>=
nrow(state.x77)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[c.] Write a command involving square brackets [ ] that extracts from state.x77 the rows corresponding to states whose graduation rates are below 50%.

<<>>=
state.x77[state.x77[1:50, 6] < 50,]
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[d.] Find the mean life expectancy for states whose high school graduation rates are below 50%.

<<>>=
mean(state.x77[state.x77[1:50,6] < 50, 4])
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[e.] Find the mean and standard deviation of each column.

<<>>=
mean(state.x77[,1])
sd(state.x77[,1])
mean(state.x77[,2])
sd(state.x77[,2])
mean(state.x77[,3])
sd(state.x77[,3])
mean(state.x77[,4])
sd(state.x77[,4])
mean(state.x77[,5])
sd(state.x77[,5])
mean(state.x77[,6])
sd(state.x77[,6])
mean(state.x77[,7])
sd(state.x77[,7])
mean(state.x77[,8])
sd(state.x77[,8])
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Number 7 look at the lab. same as the any one just the all command
\item[1.)] Write commands that:
\item[a.] Locate all rows of a matrix X that are all-zero. Hint: One way to do this is to write a function all.zero() that takes a vector argument x and checks whether all of its elements are equal to 0 or not, returning TRUE if they are and FALSE otherwise. The function all() may come in handy. Then use apply() to apply all.zero() to each row of the matrix.

<<>>=
set.seed(1)
X <- matrix(sample(0:1, size = 150, replace = TRUE), nrow = 30)
X

all.zero <- function(x) {
  return (all(x == 0))
}

apply(X, MARGIN = 1, all.zero)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[b.] Find the first all-zero row of a matrix X.

<<>>=
X[(apply(X, MARGIN = 1, all.zero)),]
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[c.] Compute the mean of the rows in which nonzero elements appear.

<<>>=
mean(X[(!apply(X, MARGIN = 1, all.zero))])
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[d.] Compute the mean of the nonzero elements in each row.

<<>>=
split <- X[!apply(X, MARGIN = 1, all.zero),]
for (i in 1:28) {
  print(mean(split[i,]))
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[e.] Locate all rows for which the sum of the elements is odd.

<<>>=
X[((apply(X, MARGIN = 1, sum)) %% 2) != 0,]
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[Part 3] Lists:
\item[8.)] The function lapply() is designed to execute a function, given as an argument FUN to lapply(), on each element of a list.
\item[a.] Use list() to construct a list containing the following three vectors:

<<>>=
v1 <- c(23, 18, 34, 14, 19, 22, 67, 37)
v2 <- c(0.1, 0.0, 3.0, 2.4, 4.1, 1.5, 1.2, 2.2)
v3 <- c("h", "b", "d", "c", "a", "f", "e", "g")
mylist <- list(v1, v2, v3)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[b.] Now use lapply() and sort() to sort each component of the list.

<<>>=
lapply(mylist, sort)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{enumerate}
\end{document}

% Add in R code
% <<>>=
% code
% @

%\begin{enumerate}
% enumerate makes a numbered list
% \end{enumerate}

% \begin{eqnarray*}
% &center$            Will center on page
% \end{eqnarray*}

% \beta_1 + \beta_0   Will display fancy letters with subscript numbers

% use dollar signs to surround "math mode" stuff $Y$ $X$ to get fancy letters

% two backslashes (\\) at the end of a line means start a new paragraph

% \noindent means do not indent the new paragraph