\documentclass [a4paper]{article}

\usepackage{graphics,latexsym,geometry,amsmath,bibunits,makeidx,fancyhdr}
\usepackage[authoryear,round]{natbib}
\usepackage{graphicx}
\usepackage{enumerate}
\usepackage{hyperref}
\usepackage{color}
\usepackage{fullpage}

\pagestyle{fancy}

\title{Homework Assignment \#2} 
\date{February 5, 2017}
\author{Matt Kline}

\begin{document}

\maketitle

\begin{enumerate}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[Part 1] Getting Started

\item[1.)]

\item[A.] Use a for() loop to calculate the sum $\sum_{j=1}^{100} j^2 = 1^2 + 2^2 + ... + 100^2$\\

<<>>=
result <- 0
for (j in 1:100){
  result <- j^2 + result
}
print(result)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[B.] Calculate the sum without using a for() loop.\\

<<>>=
result <- sum(c(1:100)^2)
print(result)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[C.] Calculate $\sum_{j=1}^{100} j^2 = 1^2 + 2^2 + ... + 100^2$ and compare with n(n+2)(2n+1)/6 for n = 100, 200, 400, 800\\

<<>>=
for (n in 100:800){
  resultSum <- sum(c(1:n)^2)
  resultForm <- (n*((n+1)*(2*n+1)))/6
  
  if (n == 100 || n == 200 || n == 400 || n == 800) {
    print(resultSum)
    print(resultForm)
  }
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[2.)] Let h(x) = $\sum_{i=1}^{n} x^i = 1 + x + x^2 ... + x^n$

\item[A.] Write a R function to calculate h(x,n) using a for() loop.

<<>>=
result <- 0
h <- function(x,n){
  result <- sum(result + x^(c(1:n)))
  print(result)
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[B.] The function h(x,n) is the finite sum of a so-called geometric series. it can be shown that h(x,n) can be calculted explicitly by the following formula (for x $\neq$ 1)

<<>>=
h(0.3, 55)
h(6.6, 8)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[C.] The function h(x,n) is the finite sum of a so-called geometric series. it can be shown that h(x,n) can be calculted explicitly by the following formula (for x $\neq$ 1)

<<>>=
h(0.3, 55)
h(6.6, 8)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[Part 2] Vectors

\item[3.)] The following are ovsercations of incoming solar radiation at a greenhouse:

\begin{eqnarray*}
11.1, 10.6, 6.3, 8.8, 10.7, 11.2, 8.9, 12.2
\end{eqnarray*}

\item[A.] Assign the data to a cector called sr

<<>>=
sr <- c(11.1, 10.6, 6.3, 8.8, 10.7, 11.2, 8.9, 12.2)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[B.] Find the mean, median, and standard deviation of the radiation observations.

<<>>=
mean(sr)
median(sr)
sd(sr)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[C.] Add 10 to each observation of sr, and assign the results to sr10. Find the mean, median, and standard deviation of sr10. Which statistics change, and by how much?

<<>>=
sr10 <- sr + 10

mean(sr10)
median(sr10)
sd(sr10)
@

The only statistic that did not change was Standard Deviation. The rest of were all changed by 10.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[D.] Multiply each observation by -2, and assign the results to srm2. Find the mean, median, and standard deviation of sr10. How do the statistics change now?

<<>>=
srm2 <- sr * -2

mean(srm2)
median(srm2)
sd(srm2)
@

All of the statistics were changed. The Mean and Median were changed by the multiple -2, while the Standard Deviation was doubled.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[E.] There are two formulas commonly used for the standard deviation of a set of data:

\begin{eqnarray*}
$\sqrt((1/n)*$\sum_{i=1}^{n} (x_i-x)^2)$ and $\sqrt((1/(n-1))*$\sum_{i=1}^{n} (x_i-x)^2)$
\end{eqnarray*}

<<>>=
x <- sr
n <- length(sr)

sd(x)
sqrt(sum((x - mean(x))^2)/(n))
sqrt(sum((x - mean(x))^2)/(n-1))
@

Based on the results from the 3 versions tested I can conclude that R uses the n-1 format to calculate Standard Deviation. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[4.)] The data below are part of a table of statistical data on the states of the United States: population in thousands, percent illiteracy, and murders per 100,000 population. First create the following vectors:

<<>>=
illit <- c(2.1, 1.5, 1.8, 1.9, 1.1, 0.7, 1.1, 0.9, 1.3, 2.0)
murder <- c(15.1, 11.3, 7.8, 10.1, 10.3, 6.8, 3.1, 6.2, 10.7, 13.9)
pop <- c(3615, 365, 2212, 2110, 21198, 2541, 3100, 579, 8277, 4931)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[A.] Compute the mean of the illiteracy data and the derviations $x_i - x$ away from the mean.

<<>>=
mean(illit)
illit - mean(illit)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[B.] Compute the medians of murder and illit. Are the medians different thatn the means?

<<>>=
mean(illit)
median(illit)
mean(murder)
mean(murder)
@

No the median and the means are the same. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[C.] The function sort() returns all teh values in a vector sorted smallest to largest. Look at the sorted values for murder and compart those to median(murder).

<<>>=
sort(murder)
median(murder)
@

By sorting the data you can clearly see that the median falls right inbetween the 2 center values of the sorted list. \\

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[D.] Convert the murder rate data to number of murders in each of the 10 states. 

<<>>=
total <- (pop * 1000) * (murder / 100000)
print(total)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[5.)] What is the value of the expression

<<>>=
1:7 + 1:2
@

This expression is computed as 1+1 2+2 3+1 4+2 5+1 6+2 7+1\\

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[6.)] Use the following command to create a character vector called queue representing a supermarket queue with Steve first in line. 

<<>>=
queue <- c("Steve", "Russell", "Alison", "Liam")
print(queue)
@

\item[i] Barry arrives

<<>>=
queue[length(queue) + 1] <- "Barry"
print(queue)
@

\item[ii] Steve is served so he leaves

<<>>=
queue <- queue[-1]
print(queue)
@

\item[iii] Pam arrives and goes to the front of the line

<<>>=
queue <- c("Pam", queue)
print(queue)
@

\item[iv] Alison gets impacient and leaves

<<>>=
queue <- queue[-which(queue == "Alison")]
print(queue)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[7.)] Replace every third value of a vector x with its negative value

<<>>=
x <- c(1:100)
i <- 1
while(i < 100) {
  x[i] <- -x[i]
  i <- i+3
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[8.)] Create a vector of 123 values (equi-spaced) between 2.1 and 3.75.

<<>>=
?seq
seq(2.1, 3.75, length.out = 123)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[9.)] Use rep() to create a vector of elements 1, 7, 1, 7, ... , 1, 7 of length 140.

<<>>=
rep(c(1,7), times = 70)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[10.)] Use rep() to create a vector of elements of length 140 where the first 70 elements are 1 and the remaining 70 are 7.

<<>>=
rep(c(1,7), times = c(70, 70))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[11.)] Using rep() and/or seq() as needed, create the following three vectors

<<>>=
rep(0:4, times = c(5,5,5,5,5))
rep(1:5, times = 5)
c(1:5, 2:6, 3:7, 4:8, 5:9)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[12.)] 

\item[A.] Write commands that create three vectors:

<<>>=
TrueAndMissing <- c(TRUE, NA)
TrueAndMissing <- sample(TrueAndMissing, 25, T)
print(TrueAndMissing)

FalseAndMissing <- c(FALSE, NA)
FalseAndMissing <- sample(FalseAndMissing, 25, T)
print(FalseAndMissing)

Mixed <- c(TRUE, FALSE, NA)
Mixed <- sample(Mixed, 25, T)
print(Mixed)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[B.] Apply the functions any( ) and all() to each of the vectors of part a and report the
results

<<>>=
any(TrueAndMissing)
all(TrueAndMissing)

any(FalseAndMissing)
all(FalseAndMissing)

any(Mixed)
all(Mixed)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[13.)] Look at the help file for median() by tying:

<<>>=
?median()
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[A.] What's the default value of na.rm?

The default value for na.rm is FALSE.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[B.] According to the help file, what's the effect of setting na.rm = TRUE in a call to median()?

Setting na.rm to TRUE will remove all NA values prior to taking the median.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[C.] Consider the vector and write a command that will calculate the median of the non NA values.
<<>>=
x <- c(4.1, 4.3, 4.7, 3.4, 3.9, 5.6, 4.6, NA, 6.6, 5.1, 4.3, 4.9, NA, 4.4, 6.1)
median(x, T)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[14.)] With the definition

<<>>=
x <- c(1, NA, -2)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[A.] What would you expect for the result of the expressions:

<<>>=
1 + NA - 2
length(x)
sum(x)
mean(x)
mean(x, na.rm = T)
median(x)
median(x, na.rm = T)
@

I would expect length to give 3. The sum, mean, and median without parameters to give NA. The mean with parameters should return -0.5 and the median with parameters should return -0.5 also.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[B.] How would you compute the sum of the non-NAs in x?

<<>>=
sum(x, na.rm = T)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\item[15.)] Consider the vector:

<<>>=
u <- c(12, 4, 8, NA, 9, NA, 7, 12, 13, NA, 10)
@

Use is.na(), square brackets [ ], and ! (R's version of "not") to write a command (or commands)
that extract all the non-missing values (non-NA's) from u.

<<>>=
for(i in 1:11) {
  if (is.na(u[i]))
    u <- u[-i]
}
@

\end{enumerate}
\end{document}

% Add in R code
% <<>>=
% code
% @

%\begin{enumerate}
% enumerate makes a numbered list
% \end{enumerate}

% \begin{eqnarray*}
% &center$            Will center on page
% \end{eqnarray*}

% \beta_1 + \beta_0   Will display fancy letters with subscript numbers

% use dollar signs to surround "math mode" stuff $Y$ $X$ to get fancy letters

% two backslashes (\\) at the end of a line means start a new paragraph

% \noindent means do not indent the new paragraph